<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闲客&#39;Blog</title>
  
  <subtitle>业精于勤荒于嬉， 行成于思毁于随</subtitle>
  <link href="http://xianke5200.github.io/atom.xml" rel="self"/>
  
  <link href="http://xianke5200.github.io/"/>
  <updated>2020-10-16T12:54:16.768Z</updated>
  <id>http://xianke5200.github.io/</id>
  
  <author>
    <name>xianke5200</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xianke5200.github.io/2020/10/14/hello-world/"/>
    <id>http://xianke5200.github.io/2020/10/14/hello-world/</id>
    <published>2020-10-14T12:25:26.136Z</published>
    <updated>2020-10-16T12:54:16.768Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Welcome to Hexo</summary>
    
    
    
    <category term="test" scheme="http://xianke5200.github.io/categories/test/"/>
    
    
    <category term="test" scheme="http://xianke5200.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Python用PIL获取图片信息</title>
    <link href="http://xianke5200.github.io/2020/08/11/Python%E7%94%A8PIL%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/"/>
    <id>http://xianke5200.github.io/2020/08/11/Python%E7%94%A8PIL%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E4%BF%A1%E6%81%AF/</id>
    <published>2020-08-11T08:04:37.000Z</published>
    <updated>2020-10-16T12:55:46.517Z</updated>
    
    <content type="html"><![CDATA[<p>我们利用处理PNG图片是，可能需要获取基本的图片信息来做一些基本的处理，话不多说，上代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">&quot;more.png&quot;</span>)</span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line">print(img.size)<span class="comment">#获取图片大小（width， height）</span></span><br><span class="line">print(img.size[<span class="number">0</span>], img.size[<span class="number">1</span>]) <span class="comment">#（width， height）</span></span><br><span class="line">print(img.mode)<span class="comment">#获取图片模式&#123;&#x27;1&#x27;:1, &#x27;L&#x27;:8, &#x27;P&#x27;:8(带颜色表), &#x27;RGB&#x27;:24, &#x27;RGBA&#x27;:32,&#125;</span></span><br><span class="line">print(img.info) <span class="comment">#打印的信息类似下方注释，当然必须图片内部包含该信息才行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&#x27;Software&#x27;: &#x27;Adobe ImageReady&#x27;, </span></span><br><span class="line"><span class="string">&#x27;XML:com.adobe.xmp&#x27;: &#x27;&lt;?xpacket begin=&quot;\ufeff&quot; id=&quot;W5M0MpCehiHzreSzNTczkc9d&quot;?&gt; </span></span><br><span class="line"><span class="string">&lt;x:xmpmeta </span></span><br><span class="line"><span class="string"> xmlns:x=&quot;adobe:ns:meta/&quot; </span></span><br><span class="line"><span class="string"> x:xmptk=&quot;Adobe XMP Core 5.6-c140 79.160451, 2017/05/06-01:08:21        &quot;&gt; </span></span><br><span class="line"><span class="string">&lt;rdf:RDF xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;&gt;</span></span><br><span class="line"><span class="string"> &lt;rdf:Description rdf:about=&quot;&quot; xmlns:xmp=&quot;http://ns.adobe.com/xap/1.0/&quot; </span></span><br><span class="line"><span class="string"> xmlns:xmpMM=&quot;http://ns.adobe.com/xap/1.0/mm/&quot; </span></span><br><span class="line"><span class="string"> xmlns:stRef=&quot;http://ns.adobe.com/xap/1.0/sType/ResourceRef#&quot; </span></span><br><span class="line"><span class="string"> xmp:CreatorTool=&quot;Adobe Photoshop CC 2018 (Macintosh)&quot; xmpMM:InstanceID=&quot;xmp.iid:AE0F209DE45311E998F5EA8083EEF15A&quot; </span></span><br><span class="line"><span class="string"> xmpMM:DocumentID=&quot;xmp.did:AE0F209EE45311E998F5EA8083EEF15A&quot;&gt; </span></span><br><span class="line"><span class="string"> &lt;xmpMM:DerivedFrom stRef:instanceID=&quot;xmp.iid:AE0F209BE45311E998F5EA8083EEF15A&quot; </span></span><br><span class="line"><span class="string"> stRef:documentID=&quot;xmp.did:AE0F209CE45311E998F5EA8083EEF15A&quot;/&gt; </span></span><br><span class="line"><span class="string"> &lt;/rdf:Description&gt; &lt;/rdf:RDF&gt; &lt;/x:xmpmeta&gt; &lt;?xpacket end=&quot;r&quot;?&gt;&#x27;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sequ = img.getdata()</span><br><span class="line">sequ0 = list(sequ)</span><br><span class="line">print(sequ0)<span class="comment">#获取图片像素值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> img.mode == <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">    print(img.palette.palette)<span class="comment">#打印颜色表</span></span><br><span class="line">    <span class="comment"># lut = img.resize((99, 99))</span></span><br><span class="line">    <span class="comment"># lut.putdata(range(256))</span></span><br><span class="line">    lut = lut.convert(<span class="string">&quot;RGB&quot;</span>)<span class="comment">#将图片转换为RGB图像</span></span><br><span class="line">    print(list(lut.getdata()))<span class="comment">#打印图像RGB像素值</span></span><br><span class="line">    <span class="comment"># pix = lut.load()</span></span><br><span class="line">    <span class="comment"># print(pix[1, 0])</span></span><br><span class="line">    <span class="comment"># lut.show()</span></span><br><span class="line">    <span class="comment"># lut now contains a sequence of (r, g, b) tuples</span></span><br><span class="line"></span><br><span class="line">pix = img.load()</span><br><span class="line">print(pix[img.size[<span class="number">0</span>]/<span class="number">2</span>, img.size[<span class="number">1</span>]/<span class="number">2</span>])<span class="comment">#某个点（x, y）的像素值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> img.mode == <span class="string">&#x27;RGBA&#x27;</span>:</span><br><span class="line">r,g,b, a = img.split()</span><br><span class="line">print(r.mode)</span><br><span class="line">print(r.size)</span><br><span class="line">print(img.size)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">我们利用处理PNG图片是，可能需要获取基本的图片信息来做</summary>
    
    
    
    <category term="GUI" scheme="http://xianke5200.github.io/categories/GUI/"/>
    
    
    <category term="python" scheme="http://xianke5200.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取哔哩哔哩视频的相关信息后续</title>
    <link href="http://xianke5200.github.io/2020/08/03/Python%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%90%8E%E7%BB%AD/"/>
    <id>http://xianke5200.github.io/2020/08/03/Python%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%90%8E%E7%BB%AD/</id>
    <published>2020-08-03T11:50:28.000Z</published>
    <updated>2020-10-16T12:32:19.701Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章通过selenium工具自动搜索爬取哔哩哔哩上面的视频相关信息，今天我们接着上一篇文章，保存视频的图片到本地。<br>首先找到要爬取的网页数据所在的位置，如下图<br><img src="https://img-blog.csdnimg.cn/20200803192657446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="爬取的图片标签信息以及网址"><br>并且，右键点击该网址，可以选择在新标签页中打开，在新标签页中，除了显示图片不会显示其他东西。如下<img src="https://img-blog.csdnimg.cn/20200803193319709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="图片数据"><br>到这就是原本的图片数据了，如果跳转过后依然不是这样，就需要继续往下寻找到最终的图片数据地址。<br>在上一篇文章的基础上就添加了一个保存图片的函数，上代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_save</span>(<span class="params">soup</span>):</span></span><br><span class="line">    img_url_list = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all_next(class_=<span class="string">&#x27;img-anchor&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200803194021234.png" alt="在这里插入图片描述"><br>查找包含图片连接的标签，得到如上所示片段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> url <span class="keyword">in</span> img_url_list:</span><br><span class="line">      img_url = url.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">      print(img_url)</span><br></pre></td></tr></table></figure><pre><code>//i2.hdslb.com/bfs/archive/176fdf5ba89c5eff3c0f300aaf53967dcddff923.jpg@320w_200h.webp</code></pre><p>获取图片链接地址，得到如上文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> img_url != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">          img_request = (<span class="string">&#x27;https:&#x27;</span>+ img_url).replace(<span class="string">&#x27;webp&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>)</span><br><span class="line">          print(img_request)</span><br><span class="line">          img_resp = requests.get(img_request)</span><br></pre></td></tr></table></figure><pre><code>https://i2.hdslb.com/bfs/archive/176fdf5ba89c5eff3c0f300aaf53967dcddff923.jpg@320w_200h.jpg</code></pre><p>将得到的网址进行拼接，并替换最后的‘webp’为‘jpg’，如果不修改直接保存到本地，图片会无法正常显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;cxk_video_img&quot;</span>):</span><br><span class="line">            os.mkdir(<span class="string">&#x27;cxk_video_img&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;cxk_video_img/%d.jpg&#x27;</span> %index, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(img_resp.content)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>最后就是新建文件夹，保存图片到文件夹中。<br>但是有一个问题，就是有的图片网址获取到的为空，不知道是否和网速也有关系，还是代码本身部分还有我没有发现的欠缺，欢迎各位大佬指正。<br>完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment">#browser = webdriver.PhantomJS()</span></span><br><span class="line">WAIT = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line">browser.set_window_size(<span class="number">1400</span>, <span class="number">900</span>)</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>, style_compression=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;蔡徐坤篮球&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;观看次数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;弹幕数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;发布时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始访问b站....&#x27;</span>)</span><br><span class="line">        browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search = browser.find_element_by_xpath(<span class="string">&#x27;//div[@class=&quot;nav-search&quot;]/form/input&#x27;</span>)</span><br><span class="line">        search.send_keys(<span class="string">&quot;蔡徐坤 篮球&quot;</span>)</span><br><span class="line">        search.send_keys(Keys.ENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到新的窗口</span></span><br><span class="line">        print(<span class="string">&#x27;跳转到新窗口&#x27;</span>)</span><br><span class="line">        all_h = browser.window_handles</span><br><span class="line">        browser.switch_to.window(all_h[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># html = browser.page_source</span></span><br><span class="line">        <span class="comment"># # print(html)</span></span><br><span class="line">        <span class="comment"># soup = BeautifulSoup(html, &#x27;html.parser&#x27;)</span></span><br><span class="line">        <span class="comment"># save_to_excel(soup)</span></span><br><span class="line">        <span class="comment"># total_index = soup.find(class_=&#x27;page-item last&#x27;).find(class_=&#x27;pagination-btn&#x27;)</span></span><br><span class="line"></span><br><span class="line">        get_source()</span><br><span class="line">        total_index = WAIT.until(EC.presence_of_element_located((By.CSS_SELECTOR,</span><br><span class="line">                                                                 <span class="string">&quot;li.page-item.last &gt; button&quot;</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pattern = re.compile(&#x27;&lt;div class=&quot;page-wrap&quot;&gt;.*?&lt;li class=&quot;page-item last&quot;&gt;.*?(\d+).*?&lt;/div&gt;&#x27;, re.S)</span></span><br><span class="line">        <span class="comment"># total_index = int(re.findall(pattern, html)[0])</span></span><br><span class="line">        <span class="keyword">return</span> int(total_index.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> search()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span>(<span class="params">page_num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;获取第(%d)页数据&#x27;</span> % page_num)</span><br><span class="line">        next_btn = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR,</span><br><span class="line">                                                          <span class="string">&#x27;li.page-item.next &gt; button&#x27;</span>)))</span><br><span class="line">        next_btn.click()</span><br><span class="line">        get_source()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        browser.refresh()</span><br><span class="line">        <span class="keyword">return</span> next_page(page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_excel</span>(<span class="params">soup</span>):</span></span><br><span class="line">    list = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all_next(class_=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_title = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        item_link = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        item_dec = item.find(class_=<span class="string">&#x27;des hide&#x27;</span>).text</span><br><span class="line">        item_view = item.find(class_=<span class="string">&#x27;so-icon watch-num&#x27;</span>).text</span><br><span class="line">        item_biubiu = item.find(class_=<span class="string">&#x27;so-icon hide&#x27;</span>).text</span><br><span class="line">        item_date = item.find(class_=<span class="string">&#x27;so-icon time&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;爬取：&#x27;</span> + item_title)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, item_title)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, item_link)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, item_dec)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, item_view)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, item_biubiu)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, item_date)</span><br><span class="line"></span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_save</span>(<span class="params">soup</span>):</span></span><br><span class="line">    img_url_list = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all_next(class_=<span class="string">&#x27;img-anchor&#x27;</span>)</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> img_url_list:</span><br><span class="line">        img_url = url.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">        print(img_url)</span><br><span class="line">        <span class="keyword">if</span> img_url != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            img_request = (<span class="string">&#x27;https:&#x27;</span>+ img_url).replace(<span class="string">&#x27;webp&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>)</span><br><span class="line">            print(img_request)</span><br><span class="line">            img_resp = requests.get(img_request)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;cxk_video_img&quot;</span>):</span><br><span class="line">                os.mkdir(<span class="string">&#x27;cxk_video_img&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&#x27;cxk_video_img/%d.jpg&#x27;</span> %index, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img_resp.content)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_source</span>():</span></span><br><span class="line">    WAIT.until(EC.presence_of_element_located(</span><br><span class="line">        (By.CSS_SELECTOR, <span class="string">&#x27;ul.video-list.clearfix&#x27;</span>)))</span><br><span class="line">    <span class="comment"># browser.refresh()</span></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    save_to_excel(soup)</span><br><span class="line">    img_save(soup)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = search()</span><br><span class="line">        <span class="comment"># print(total)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(total)+<span class="number">1</span>):</span><br><span class="line">            next_page(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        browser.close()</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    book.save(<span class="string">u&#x27;蔡徐坤篮球.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>本来还想爬取保存视频到本地，结果没法得到视频的最终地址，所以只能暂且搁置，保存视频到本地，也可以采用保存图片相类似的方式。</p>]]></content>
    
    
    <summary type="html">上一篇文章通过selenium工具自动搜索爬取哔哩哔哩上面的视频相关信息，今天我们接着上一篇文章，保存视频的图片到本地。</summary>
    
    
    
    <category term="python3 爬虫" scheme="http://xianke5200.github.io/categories/python3-%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>python pyqt5开发小结</title>
    <link href="http://xianke5200.github.io/2020/07/24/python%20pyqt5%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/"/>
    <id>http://xianke5200.github.io/2020/07/24/python%20pyqt5%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/</id>
    <published>2020-07-24T10:36:50.000Z</published>
    <updated>2020-10-16T12:30:05.954Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天用python+pyqt5+QtDesigner编写了两个小软件，在这里做一个简单的总结。<br>1.创建新控件时需要指定父控件<br>2.可以在状态栏上添加额外的文本提示或者进度条显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frame2_bar = QStatusBar()</span><br><span class="line">self.sr_lable = QLabel(self.rom_frame)</span><br><span class="line">   self.sr_lable.setText(<span class="string">&#x27;S:       R:      &#x27;</span>)</span><br><span class="line">  elf.sr_lable.setGeometry(<span class="number">100</span>, frame.height(), <span class="number">50</span>, <span class="number">25</span>)</span><br><span class="line">  frame2_bar.addPermanentWidget(self.sr_lable)</span><br></pre></td></tr></table></figure><p>3.是TextEdit文本填满文本框后。自动向下滚屏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.textEdit.moveCursor(QTextCursor.End)</span><br><span class="line">   self.textEdit.insertPlainText(out_s)</span><br></pre></td></tr></table></figure><p>4.通过事件弹出自动义新窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file &#x27;time_display.ui&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.15.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span></span><br><span class="line"><span class="comment"># run again.  Do not edit this file unless you know what you are doing.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Dialog</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span>(<span class="params">self, Dialog</span>):</span></span><br><span class="line">        Dialog.setObjectName(<span class="string">&quot;Dialog&quot;</span>)</span><br><span class="line">        Dialog.resize(<span class="number">280</span>, <span class="number">198</span>)</span><br><span class="line">        self.widget = QtWidgets.QWidget(Dialog)</span><br><span class="line">        self.widget.setGeometry(QtCore.QRect(<span class="number">50</span>, <span class="number">20</span>, <span class="number">191</span>, <span class="number">151</span>))</span><br><span class="line">        self.widget.setObjectName(<span class="string">&quot;widget&quot;</span>)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)</span><br><span class="line">        self.verticalLayout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.verticalLayout.setObjectName(<span class="string">&quot;verticalLayout&quot;</span>)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.widget)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">20</span>)</span><br><span class="line">        self.label_2.setFont(font)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">&quot;label_2&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.label_2)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.widget)</span><br><span class="line">        font = QtGui.QFont()</span><br><span class="line">        font.setPointSize(<span class="number">20</span>)</span><br><span class="line">        self.label.setFont(font)</span><br><span class="line">        self.label.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line">        self.label.setObjectName(<span class="string">&quot;label&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.label)</span><br><span class="line">        self.pushButton = QtWidgets.QPushButton(self.widget)</span><br><span class="line">        self.pushButton.setObjectName(<span class="string">&quot;pushButton&quot;</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.pushButton)</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Dialog)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Dialog)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span>(<span class="params">self, Dialog</span>):</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ex_pygui.time_display <span class="keyword">import</span> Ui_Dialog  <span class="comment"># 显示自定义的弹出窗口</span></span><br><span class="line">        self.di = QDialog()</span><br><span class="line">        timedisplay = Ui_Dialog()</span><br><span class="line">        timedisplay.setupUi(self.di)</span><br><span class="line">        now = time.localtime()</span><br><span class="line">        timedisplay.label.setText(<span class="string">&#x27;%02d:%02d:%02d&#x27;</span> %(now.tm_hour, now.tm_min, now.tm_sec))</span><br><span class="line">        timedisplay.pushButton.clicked.connect(self.di.close)</span><br><span class="line">        self.di.setWindowModality(Qt.ApplicationModal) <span class="comment">#锁定子窗口，关闭子窗口后才可以操作父窗口</span></span><br><span class="line"></span><br><span class="line">        self.di.show()</span><br></pre></td></tr></table></figure><p>可以先创建一个QDialog窗口，然后在外部调用，如上代码所示<br>5.保存Excel文件为xlsx格式报错，可以将文件保存为xls格式<br>6.sqlite数据库确实简便好用<br>7.python的线程开启后，在死循环内会一直运行，无法暂停和关闭，需要重新编写定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ser_recvthread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        super(ser_recvthread, self).__init__()</span><br><span class="line">        self.func = func</span><br><span class="line">        self.__flag = threading.Event()  <span class="comment"># 用于暂停线程的标识</span></span><br><span class="line">        self.__flag.set()  <span class="comment"># 设置为True</span></span><br><span class="line">        self.__running = threading.Event()  <span class="comment"># 用于停止线程的标识</span></span><br><span class="line">        self.__running.set()  <span class="comment"># 将running设置为True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> self.__running.isSet():</span><br><span class="line">            self.__flag.wait()  <span class="comment"># 为True时立即返回, 为False时阻塞直到内部的标识位为True后返回</span></span><br><span class="line">            self.func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pause</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__flag.clear()  <span class="comment"># 设置为False, 让线程阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resume</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__flag.set()  <span class="comment"># 设置为True, 让线程停止阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.__flag.clear()</span><br><span class="line">        self.__running.clear()  <span class="comment"># 设置为False</span></span><br><span class="line"></span><br><span class="line">self.ser_thread = ser_recvthread(self.ser_recv)</span><br><span class="line">self.ser_thread.start()</span><br><span class="line">self.ser_thread.pause()</span><br><span class="line">self.ser_thread.resume()</span><br></pre></td></tr></table></figure><p>8.pyserial获取串口列表，并添加到combox中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> serial.tools.list_ports</span><br><span class="line">self.ser_num.clear()</span><br><span class="line">   plist = list(serial.tools.list_ports.comports())</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(plist)):</span><br><span class="line">       plist_0 = list(plist[i])</span><br><span class="line">       <span class="comment">#print(&#x27;串口号：&#x27;, list(plist[i]),str(plist_0[0]))</span></span><br><span class="line">       self.ser_num.addItem(plist_0[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>9.在这次写代码的过程中，我通过线程读取串口数据时，在数据量比较小，且发送数据比较慢的情况下，串口接收还比较正常，但是在数据量比较大且传输速度比较快时会出现卡死的情况，换成定时器定时1ms读取就没问题；不知道是线程部分的逻辑有问题还是怎么回事，暂时还没弄明白，暂且搁置，哪位大神如果看到这，有相关解决办法，欢迎指正。所以暂且推荐读取串口数据时采用定时读取的方式。</p><p>暂时就写到这，后续想到有必要记录的再继续添加。</p>]]></content>
    
    
    <summary type="html">最近几天用python+pyqt5+QtDesigner编写了两个小软件</summary>
    
    
    
    <category term="GUI" scheme="http://xianke5200.github.io/categories/GUI/"/>
    
    
  </entry>
  
  <entry>
    <title>Python爬取哔哩哔哩视频的相关信息并保存到excel文档</title>
    <link href="http://xianke5200.github.io/2020/07/24/Python%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0excel%E6%96%87%E6%A1%A3/"/>
    <id>http://xianke5200.github.io/2020/07/24/Python%E7%88%AC%E5%8F%96%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E8%A7%86%E9%A2%91%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E5%B9%B6%E4%BF%9D%E5%AD%98%E5%88%B0excel%E6%96%87%E6%A1%A3/</id>
    <published>2020-07-24T10:36:50.000Z</published>
    <updated>2020-10-16T12:30:53.238Z</updated>
    
    <content type="html"><![CDATA[<p>利用自动化测试工具selenium自动搜索视频信息，自动翻页爬取搜索到的视频相关信息。<br>首先找到自己要爬取数据网页数据，如下<br><img src="https://img-blog.csdnimg.cn/20200803192538130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="爬取的网页数据"><br>整个流程如下：<br>    1.声明浏览器对象<br>    2.声明浏览器最长等待时间<br>    3.创建excel文件对象<br>    4.新建excel sheet页，并写入头部标签<br>    5.浏览器访问网页地址<br>    6.定位输入窗口，输入文字并回车跳转<br>    7.切换到新标签页<br>    8.等待网页数据加载完成<br>    9.beautifulSoup解析网页数据<br>    10.找到要爬取的数据，并保存到excel中<br>    11.获取搜索到的最大页数<br>    12.等待下一页按钮加载完成，并点击下一页按钮切换到下一页<br>    13.重复8-10步和12步，直到所有页数爬取完毕</p><ol><li><p>声明浏览器对象，并设置浏览器窗口大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment">#browser = webdriver.PhantomJS()</span></span><br><span class="line">browser.set_window_size(<span class="number">1400</span>, <span class="number">900</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建excel文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>, style_compression=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;蔡徐坤篮球&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;观看次数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;弹幕数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;发布时间&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在这里采用xlwt库对excel文件进行写入操作，xlwt库只能写入数据，无法读取数据</p></li><li><p>访问B站，并自动搜索，同时返回视频页数</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始访问b站....&#x27;</span>)</span><br><span class="line">        browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        search = browser.find_element_by_xpath(<span class="string">&#x27;//div[@class=&quot;nav-search&quot;]/form/input&#x27;</span>)</span><br><span class="line">        search.send_keys(<span class="string">&quot;蔡徐坤 篮球&quot;</span>)</span><br><span class="line">        search.send_keys(Keys.ENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到新的窗口</span></span><br><span class="line">        print(<span class="string">&#x27;跳转到新窗口&#x27;</span>)</span><br><span class="line">        all_h = browser.window_handles</span><br><span class="line">        browser.switch_to.window(all_h[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        html = browser.page_source</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        save_to_excel(soup)</span><br><span class="line"></span><br><span class="line">        total_index = soup.find(class_=<span class="string">&#x27;page-item last&#x27;</span>).find(class_=<span class="string">&#x27;pagination-btn&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> int(total_index.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> search()</span><br></pre></td></tr></table></figure><p>3.1 打开浏览器，访问B站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.2 定位搜索框的位置，并填入要搜索的文本，并回车</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search = browser.find_element_by_xpath(<span class="string">&#x27;//div[@class=&quot;nav-search&quot;]/form/input&#x27;</span>)</span><br><span class="line">  search.send_keys(<span class="string">&quot;蔡徐坤 篮球&quot;</span>)</span><br><span class="line">  search.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure><p>selenium可以驱动浏览器代替人工完成各种操作，查找定位要操作的节点，填充数据，模拟点击，拖拽等<br>查找单个节点可以通过如下方法：<br>find_element_by_id 【通过元素的 id 来选择】<br>例：<div id='bdy-inner'>test</div>，查找：driver.find_element_by_id(‘bdy-inner’)</p><p>find_element_by_name 【通过元素的 name 来选择】<br>例：<input name="username" type="text" />，查找：driver.find_element_by_name(‘password’)</p><p>find_element_by_xpath 【通过 xpath 选择】<br>例：<form id="loginForm">，查找：driver.find_element_by_xpath(“//form[@id=’loginForm’]”)</p><p>find_element_by_link_text 【通过链接地址选择】<br>例：<a href="continue.html">continue</a>，查询：driver.find_element_by_link_text(‘continue’)</p><p>find_element_by_partial_link_text 【通过链接的部分地址选择】<br>例：<a href="continue.html">continue</a>，查询：driver.find_element_by_link_text(‘cont’)</p><p>find_element_by_tag_name 【通过元素的名称选择】<br>例：&lt; h1&gt;welcome&lt; h1&gt;，查询：driver.find_element_by_tag_name(‘h1’)</p><p>find_element_by_class_name 【通过元素的 class 选择】<br>例：&lt; p class=”content”&gt;welcome to TRHX’S BLOG!&lt; /p&gt;，查询：driver.find_element_by_class_name(‘content’)</p><p>find_element_by_css_selector 【通过元素的 class 选择】<br>例：&lt; div class=’bdy-inner’&gt;test&lt; /div&gt;，查询：driver.find_element_by_css_selector(‘div.bdy-inner’)</p><p>find_element() 【通用方法，需要传递两个参数：查找方式 By 和值】<br>例：driver.find_element_by_id(‘inner’) 等价于 find_element(By.ID, inner)，使用时需要from selenium.webdriver.common.by import By</p><p>selenium对浏览器的操作也可称之为节点交互，常用的节点交互方式有以下几种<br>    send_keys：模拟按键输入<br>    clear：清除元素的内容<br>    click：单击元素<br>    submit：提交表单</p><p>3.3 完成点击操作后，搜索结果会在新标签页中呈现，这时需要切换到新标签页中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;跳转到新窗口&#x27;</span>)</span><br><span class="line">   all_h = browser.window_handles</span><br><span class="line">   browser.switch_to.window(all_h[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>3.4 获取第一页的视频相关信息，并保存到excel文档中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html = browser.page_source</span><br><span class="line"><span class="comment"># print(html)</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">save_to_excel(soup)</span><br></pre></td></tr></table></figure><p>这里采用beautifulSoup库对网页数据进行解析。<br>常用的解析器有四种,如下：<br>| 解析器 | 使用方法 |<br>|–|–|<br>| Python 标准库 | BeautifulSoup(markup, “html.parser”)     |<br>|LXML HTML 解析器|BeautifulSoup(markup, “lxml”)|<br>|LXML XML 解析器|BeautifulSoup(markup, “xml”)|<br>|html5lib|BeautifulSoup(markup, “html5lib”)|<br>3.5 返回搜索结果的页数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total_index = soup.find(class_=<span class="string">&#x27;page-item last&#x27;</span>).find(class_=<span class="string">&#x27;pagination-btn&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> int(total_index.text)</span><br></pre></td></tr></table></figure><p>这里利用beautifulSoup解析器提取名为page-item last的class节点下的pagination-btn节点文本数据，得到总的搜索页数<br>4. 点击下一页按钮，并爬取下一页视频信息保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WAIT = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span>(<span class="params">page_num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;获取第(%d)页数据&#x27;</span> % page_num)</span><br><span class="line">        next_btn = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR,</span><br><span class="line">                                                          <span class="string">&#x27;li.page-item.next &gt; button&#x27;</span>)))</span><br><span class="line">        next_btn.click()</span><br><span class="line">        get_source()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        browser.refresh()</span><br><span class="line">        <span class="keyword">return</span> next_page(page_num)</span><br></pre></td></tr></table></figure><p>引入 WebDriverWait 对象，指定最长等待时间，这里最长等待时间20秒，调用它的 until() 方法，传入要等待条件 expected_conditions。比如，这里传入了 element_to_be_clickable这个条件，代表节点被选中，并可以被点击的时候<br>4.1 定位下一页按钮位置，并发送点击事件切换到下一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;获取第(%d)页数据&#x27;</span> % page_num)</span><br><span class="line">       next_btn = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR,</span><br><span class="line">                                                         <span class="string">&#x27;li.page-item.next &gt; button&#x27;</span>)))</span><br><span class="line">       next_btn.click()</span><br></pre></td></tr></table></figure><p>4.2 切换到下一页后，等待ul.video-list.clearfix节点出现，再获取界面数据，爬取视频信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_source</span>():</span></span><br><span class="line">    WAIT.until(EC.presence_of_element_located(</span><br><span class="line">        (By.CSS_SELECTOR, <span class="string">&#x27;ul.video-list.clearfix&#x27;</span>)))</span><br><span class="line">    <span class="comment"># browser.refresh()</span></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    save_to_excel(soup)</span><br></pre></td></tr></table></figure><p>5.最后，保存爬取到的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_excel</span>(<span class="params">soup</span>):</span></span><br><span class="line">    list = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all_next(class_=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_title = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        item_link = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        item_dec = item.find(class_=<span class="string">&#x27;des hide&#x27;</span>).text</span><br><span class="line">        item_view = item.find(class_=<span class="string">&#x27;so-icon watch-num&#x27;</span>).text</span><br><span class="line">        item_biubiu = item.find(class_=<span class="string">&#x27;so-icon hide&#x27;</span>).text</span><br><span class="line">        item_date = item.find(class_=<span class="string">&#x27;so-icon time&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;爬取：&#x27;</span> + item_title)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, item_title)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, item_link)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, item_dec)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, item_view)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, item_biubiu)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, item_date)</span><br><span class="line"></span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提取到名为视频信息节点名为video-list clearfix的class节点的所有下一级名为info的class节点信息后，在提取各个信息存入excel<br>6.完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment">#browser = webdriver.PhantomJS()</span></span><br><span class="line">WAIT = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line">browser.set_window_size(<span class="number">1400</span>, <span class="number">900</span>)</span><br><span class="line"></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>, style_compression=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;蔡徐坤篮球&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;描述&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;观看次数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;弹幕数&#x27;</span>)</span><br><span class="line">sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;发布时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;开始访问b站....&#x27;</span>)</span><br><span class="line">        browser.get(<span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search = browser.find_element_by_xpath(<span class="string">&#x27;//div[@class=&quot;nav-search&quot;]/form/input&#x27;</span>)</span><br><span class="line">        search.send_keys(<span class="string">&quot;蔡徐坤 篮球&quot;</span>)</span><br><span class="line">        search.send_keys(Keys.ENTER)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 跳转到新的窗口</span></span><br><span class="line">        print(<span class="string">&#x27;跳转到新窗口&#x27;</span>)</span><br><span class="line">        all_h = browser.window_handles</span><br><span class="line">        browser.switch_to.window(all_h[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        html = browser.page_source</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        save_to_excel(soup)</span><br><span class="line"></span><br><span class="line">        total_index = soup.find(class_=<span class="string">&#x27;page-item last&#x27;</span>).find(class_=<span class="string">&#x27;pagination-btn&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> int(total_index.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> search()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span>(<span class="params">page_num</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">&#x27;获取第(%d)页数据&#x27;</span> % page_num)</span><br><span class="line">        next_btn = WAIT.until(EC.element_to_be_clickable((By.CSS_SELECTOR,</span><br><span class="line">                                                          <span class="string">&#x27;li.page-item.next &gt; button&#x27;</span>)))</span><br><span class="line">        <span class="comment"># time.sleep(5)</span></span><br><span class="line">        next_btn.click()</span><br><span class="line">        get_source()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        browser.refresh()</span><br><span class="line">        <span class="keyword">return</span> next_page(page_num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_excel</span>(<span class="params">soup</span>):</span></span><br><span class="line">    list = soup.find(class_=<span class="string">&#x27;video-list clearfix&#x27;</span>).find_all_next(class_=<span class="string">&#x27;info&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        item_title = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">        item_link = item.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        item_dec = item.find(class_=<span class="string">&#x27;des hide&#x27;</span>).text</span><br><span class="line">        item_view = item.find(class_=<span class="string">&#x27;so-icon watch-num&#x27;</span>).text</span><br><span class="line">        item_biubiu = item.find(class_=<span class="string">&#x27;so-icon hide&#x27;</span>).text</span><br><span class="line">        item_date = item.find(class_=<span class="string">&#x27;so-icon time&#x27;</span>).text</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;爬取：&#x27;</span> + item_title)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> n</span><br><span class="line"></span><br><span class="line">        sheet.write(n, <span class="number">0</span>, item_title)</span><br><span class="line">        sheet.write(n, <span class="number">1</span>, item_link)</span><br><span class="line">        sheet.write(n, <span class="number">2</span>, item_dec)</span><br><span class="line">        sheet.write(n, <span class="number">3</span>, item_view)</span><br><span class="line">        sheet.write(n, <span class="number">4</span>, item_biubiu)</span><br><span class="line">        sheet.write(n, <span class="number">5</span>, item_date)</span><br><span class="line"></span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_source</span>():</span></span><br><span class="line">    WAIT.until(EC.presence_of_element_located(</span><br><span class="line">        (By.CSS_SELECTOR, <span class="string">&#x27;ul.video-list.clearfix&#x27;</span>)))</span><br><span class="line">    <span class="comment"># browser.refresh()</span></span><br><span class="line">    html = browser.page_source</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    save_to_excel(soup)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = search()</span><br><span class="line">        <span class="comment"># print(total)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(total)+<span class="number">1</span>):</span><br><span class="line">            next_page(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        browser.close()</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    book.save(<span class="string">u&#x27;蔡徐坤篮球.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后将excel文档保存为xls格式，在有的电脑上面保存为xlsx格式时，本地打开文档出现格式错误的问题，将保存格式更改为xls可以解决该问题。</p>]]></content>
    
    
    <summary type="html">利用自动化测试工具selenium自动搜索视频信息，自动翻页爬取搜索到的视频相关信息。</summary>
    
    
    
    <category term="python3 爬虫" scheme="http://xianke5200.github.io/categories/python3-%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>获取程序编译后链接脚本中变量</title>
    <link href="http://xianke5200.github.io/2019/12/19/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E5%90%8E%E9%93%BE%E6%8E%A5%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%8F%98%E9%87%8F/"/>
    <id>http://xianke5200.github.io/2019/12/19/%E8%8E%B7%E5%8F%96%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E5%90%8E%E9%93%BE%E6%8E%A5%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%8F%98%E9%87%8F/</id>
    <published>2019-12-19T09:11:39.000Z</published>
    <updated>2020-10-16T12:38:00.571Z</updated>
    
    <content type="html"><![CDATA[<p>sct文件：各段在内存中的分配情况，每一次编译完后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$ER_IROM1$$Base;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$ER_IROM1$$Limit;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$ER_IROM1$$Length;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$Base;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$Limit;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$Length;     </span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$ZI$$Base;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$ZI$$Limit;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Image$$RW_IRAM1$$ZI$$Length;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> base,limit,length;</span><br><span class="line">base = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$ER_IROM1$$Base;</span><br><span class="line">limit = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$ER_IROM1$$Limit;</span><br><span class="line">length = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$ER_IROM1$$Length;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nER_IROM1 Base = 0x%x\nER_IROM1 Limit = 0x%x\nER_IROM1 Length = %d\n&quot;</span>,base,limit,length);</span><br><span class="line"></span><br><span class="line">base = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$Base;</span><br><span class="line">limit = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$Limit;</span><br><span class="line">length = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$Length;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nRW_IRAM1 Base = 0x%x\nRW_IRAM1 Limit = 0x%x\nRW_IRAM1 Length = %d\n&quot;</span>,base,limit,length);</span><br><span class="line"></span><br><span class="line">base = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$ZI$$Base;</span><br><span class="line">limit = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$ZI$$Limit;</span><br><span class="line">length = (<span class="keyword">unsigned</span> <span class="keyword">int</span> )&amp;Image$$RW_IRAM1$$ZI$$Length;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nRW_IRAM1_ZI Base = 0x%x\nRW_IRAM1_ZI Limit = 0x%x\nRW_IRAM1_ZI Length = %d\n&quot;</span>,base,limit,length);</span><br></pre></td></tr></table></figure><pre><code>Image$$ER_IROM1$$Length : CODE段和RO_data段的大小Image$$RW_IRAM1$$Length : RW_data段的大小Image$$RW_IRAM1$$ZI$$Length : ZI_data段的大小</code></pre>]]></content>
    
    
    <summary type="html">sct文件：各段在内存中的分配情况，每一次编译完后</summary>
    
    
    
    <category term="驱动" scheme="http://xianke5200.github.io/categories/%E9%A9%B1%E5%8A%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu启动报错未知文件系统错误</title>
    <link href="http://xianke5200.github.io/2019/08/08/Ubuntu%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99error_unknown%20filesystem%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://xianke5200.github.io/2019/08/08/Ubuntu%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99error_unknown%20filesystem%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2019-08-08T07:42:29.000Z</published>
    <updated>2020-10-16T12:36:05.985Z</updated>
    
    <content type="html"><![CDATA[<p>我安装的时ubuntu14.04，长时间没启用，最近准备进入Ubuntu系统的时候就出现报错<br>unknown filesystem<br>grub rescue&gt;<br>解决方案<br>1.如果不知道自己安装的ununtu系统启动文件再那个分区，可以先查找分区<br>grub rescue&gt; ls<br>执行该命令后<br>就会出现电脑上类似如下的所有的分区列表<br>(hd0),(hd0,gpt0)…<br>2.接下来查找查找具体的Ubuntu系统所在分区<br>grub rescue&gt;ls (hd0,gpt0)<br>这样就可以每个分区的相关信息，遍历所有的分区查找到Ubuntu所在分区<br>如果Ubuntu不再该分区，就还是会出现unknown filesystem的提示<br>3.修改启动分区<br>找到ubuntu所在分区后<br>执行如下指令：<br>grub rescue&gt;set root=(hs0,gpt10)(我的Ubuntu分区实在第10个分区)<br>grub rescue&gt;set prefix=(hd0,gpt10)/boot/grub<br>grub rescue&gt;insmod normal<br>grub rescue&gt;normal<br>依次执行后就可以正常启动ubuntu系统了<br>4.修复grub<br>正常启动ubuntu后，启动命令行<br>执行如下指令<br>sudo update-rub<br>sudo grub-install/dev/sda(重建grub到第一硬盘mbr)<br>到这该问题就解决了。</p>]]></content>
    
    
    <summary type="html">我安装的时ubuntu14.04，长时间没启用，最近准备进入Ubuntu系统的时候就出现报错</summary>
    
    
    
    <category term="Linux" scheme="http://xianke5200.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>项目调试一点小结</title>
    <link href="http://xianke5200.github.io/2019/08/08/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E4%B8%80%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
    <id>http://xianke5200.github.io/2019/08/08/%E9%A1%B9%E7%9B%AE%E8%B0%83%E8%AF%95%E4%B8%80%E7%82%B9%E5%B0%8F%E7%BB%93/</id>
    <published>2019-08-08T07:42:29.000Z</published>
    <updated>2020-10-16T12:41:40.798Z</updated>
    
    <content type="html"><![CDATA[<p>  最近调试nordic项目时，遇到一个奇怪的问题，在将bootloader和应用程序烧录到板子上后，出现程序跑不起来的情况。<br>  在Nordic上有两个引脚默认是作为NFCT的天线引脚来用的，因为项目需要，这两个引脚需要作为GPIO引脚来用，因此需要配置寄存器来使能这两个引脚的GPIO功能。<img src="https://img-blog.csdnimg.cn/20190808144836552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  <img src="https://img-blog.csdnimg.cn/20190808150916997.png" alt="在这里插入图片描述"><br>  在项目上硬件设计上，通过引脚控制一个MOS管来控制，电路电源VDD的打开和关闭，同时VDD和一个10uF电容串联接地。<br>  在没有配置NFCT两个引脚为GPIO之前，我们做了如下一些测试，首先利用示波器查看MOS管输出脚的电平，发现在MOS管开通情况下，输出脚电平只有2.6V左右，比理想的3.3V低，同时测试MOS管的控制脚电平，控制脚电平电压大概有0.9V.比正常的0V略高；出现这种情况是由于，NFCT两个引脚没有配置为GPIO脚，这两个引脚处于悬浮状态，无法输出准确的电平。<br>  在配置两个引脚为GPIO引脚后，出现板子无法正常运行的情况，这时我们在继续上述测试，发现有时候改变MOS管控制脚的电平的时候，对应的VDD电平只是瞬间变化一下，然后又会恢复到改变MOS管控制脚电平之前的状态，这就会导致其他器件IC无法正常工作；这是再测试芯片供电电平，改变MOS管控制脚电平，在示波器上发现芯片供电的电平状态会出现瞬间变为低电平的然后又变成高电平的情况；可以确定芯片在改变MOS管控制脚电平的时候出现了复位。所以就导致板子出现一直复位的情况，无法正常运行的情况。再看硬件电路，会发现在打开VDD电源的瞬间，由于VDD和电容串联，在电容的作用下，会出现很大的冲激电流，导致芯片供电的LDO进入保护状态导致复位。<br>  解决方法：板子上的i2c之前已经外接上拉电阻和VDD相连，所以在打开VDD电源之前可以先配置i2c的两个引脚为高电平，并延时一段时间，给vdd端的电容足够时间充电，来防止在打开MOS管的时候产生很大的冲激电流，导致复位。在打开电源以后，再把i2c两引脚配置为输入。</p>]]></content>
    
    
    <summary type="html">sct文件：最近调试nordic项目时，遇到一个奇怪的问题，在将bootloader和应用程序烧录到板子上后，出现程序跑不起来的情况。</summary>
    
    
    
    <category term="Nordic" scheme="http://xianke5200.github.io/categories/Nordic/"/>
    
    
  </entry>
  
  <entry>
    <title>提升刷屏速度，降低显示水纹效果的一点想法</title>
    <link href="http://xianke5200.github.io/2019/08/08/%E6%8F%90%E5%8D%87%E5%88%B7%E5%B1%8F%E9%80%9F%E5%BA%A6%EF%BC%8C%E9%99%8D%E4%BD%8E%E6%98%BE%E7%A4%BA%E6%B0%B4%E7%BA%B9%E6%95%88%E6%9E%9C%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95/"/>
    <id>http://xianke5200.github.io/2019/08/08/%E6%8F%90%E5%8D%87%E5%88%B7%E5%B1%8F%E9%80%9F%E5%BA%A6%EF%BC%8C%E9%99%8D%E4%BD%8E%E6%98%BE%E7%A4%BA%E6%B0%B4%E7%BA%B9%E6%95%88%E6%9E%9C%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95/</id>
    <published>2019-08-08T06:16:58.000Z</published>
    <updated>2020-10-16T12:41:03.938Z</updated>
    
    <content type="html"><![CDATA[<p>一般再nordic上画图都是采用emwin库函数画图，但是这样都比较慢，因为库函数都是每次读取图片的一行数据写入屏中显示，画图过程中水纹比较明显，所以之前自己从flash中读取图片数据，不采用库函数，自己读取显示可以一次从flash中，读取超过一行的数据，这样可以明显的，提升刷屏效果，但是当图片数据比较大，刷屏的频次比较快时，也会有水纹效果，所以还是有点不如人意。<br>所以这里我想，是不是可以在flash中划分一块整屏大小的区域，用来存储一整屏大小的数据，当那些图片比较大，刷屏频次快的界面时，可以先将这一整屏的数据写入到flash中划分的区域，然后再将falsh中的数据读取出来写入到屏幕中显示；相比之前，这样的话每次只需要刷一整屏的数据就可以完成显示，相当于在flash中写入一张整屏大小图片的数据，然后将这张图片的数据读取出来显示，按我之前的自己从flash中读取数据显示的方法，在240*240的屏幕上，刷一整屏的数据大概需要200ms，速度应该算是比较快的，但是在显示指针表盘时，特别是在显示秒针的情况下，由于视觉暂留效果，还是会有轻微的刷屏水纹效果。<br>或许还可以更进一步，将屏幕划分为四块区域，每块区域在flash对应的有一块存储空间，当屏幕上的显示部分需要改动的不太大时，比如只是文字，这样就可以直接显示在屏幕上；如果要改动秒针，或者要刷新的某一部分短时间内要多次刷新，就只需要改动这四块区域中的某一块，或者两块，这样的话，需要刷新的部分就显著减少了，刷屏是的效果也会比较好。</p>]]></content>
    
    
    <summary type="html">sct文件：一般再nordic上画图都是采用emwin库函数画图，但是这样都比较慢，因为库函数都是每次读取图片的一行数据写入屏中显示</summary>
    
    
    
    <category term="GUI" scheme="http://xianke5200.github.io/categories/GUI/"/>
    
    
  </entry>
  
  <entry>
    <title>4412学习笔记</title>
    <link href="http://xianke5200.github.io/2019/07/05/4412%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://xianke5200.github.io/2019/07/05/4412%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-07-05T11:33:54.000Z</published>
    <updated>2020-10-16T13:33:20.005Z</updated>
    
    <content type="html"><![CDATA[<p>局域网通信：<br>同一网段：当一个网路的IP地址与子网掩码相与之后的值与另一个网络的IP地址与子网掩码相与值后的值相等的时候，就可以认为两个网络处于同一网段，这时两个网络就可以通过网络进行通信。确认两个网络是否可以通信，可以使用ping指令（ping + ip）。<br>    假如现在有两个网络设备，可以将两个网络设备直接利用网线连接在一起或者利用路由器，两个网络设备接在同一个路由器上，然后在其中一个网络设备上使用<strong>ping + 另一设备的网络地址</strong>，如果可以ping通，就表示两个网络再同一网段，可以正常通信；如果ping不通，可以手动修改两个网络设备的ip地址，使得这两个网络处于同一网段，就可以建立简单的局域网通信了。</p>]]></content>
    
    
    <summary type="html">局域网通信：</summary>
    
    
    
    <category term="Linux" scheme="http://xianke5200.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>关于提升仿动态图显示速度的一点想法</title>
    <link href="http://xianke5200.github.io/2019/06/27/%E5%85%B3%E4%BA%8E%E6%8F%90%E5%8D%87%E4%BB%BF%E5%8A%A8%E6%80%81%E5%9B%BE%E6%98%BE%E7%A4%BA%E9%80%9F%E5%BA%A6%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95/"/>
    <id>http://xianke5200.github.io/2019/06/27/%E5%85%B3%E4%BA%8E%E6%8F%90%E5%8D%87%E4%BB%BF%E5%8A%A8%E6%80%81%E5%9B%BE%E6%98%BE%E7%A4%BA%E9%80%9F%E5%BA%A6%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95/</id>
    <published>2019-06-27T09:18:49.000Z</published>
    <updated>2020-10-16T12:37:22.304Z</updated>
    
    <content type="html"><![CDATA[<p>典型的BMP图像文件由四部分组成：<br>1：位图头文件数据结构，它包含BMP图像文件的类型、显示内容等信息；<br>2：位图信息数据结构，它包含有BMP图像的宽、高、压缩方法，以及定义颜色等信息；<br>3：调色板，这个部分是可选的，有些位图需要调色板，有些位图，比如真彩色图（24位的BMP）就不需要调色板；<br>4：位图数据，这部分的内容根据BMP位图使用的位数不同而不同，在24位图中直接使用RGB，而其他的小于24位的使用调色板中颜色索引值。<br>其中位图文件数据结构为14个字节，结构组成如下：<br>typedef struct tagBITMAPFILEHEADER<br>{<br>WORD bfType;//位图文件的类型，必须为BM(1-2字节）<br>DWORD bfSize;//位图文件的大小，以字节为单位（3-6字节，低位在前）<br>WORD bfReserved1;//位图文件保留字，必须为0(7-8字节）<br>WORD bfReserved2;//位图文件保留字，必须为0(9-10字节）<br>DWORD bfOffBits;//位图数据的起始位置，以相对于位图（11-14字节，低位在前）<br>//文件头的偏移量表示，以字节为单位<br>}attribute((packed)) BITMAPFILEHEADER;<br>在32位MCU中要注意字节对齐，否则读取出来的数据可能会对不上，该结构体中的bfsize元素，代表的是整个bmp文件的大小，也就是bmp文件4个部分的总大小。<br>位图信息数据结构位40个字节，结构组成如下：<br>typedef struct tagBITMAPINFOHEADER<br>{<br>DWORD biSize;//本结构所占用字节数（15-18字节）<br>LONG biWidth;//位图的宽度，以像素为单位（19-22字节）<br>LONG biHeight;//位图的高度，以像素为单位（23-26字节）<br>WORD biPlanes;//目标设备的级别，必须为1(27-28字节）<br>WORD biBitCount;//每个像素所需的位数，必须是1（双色），（29-30字节）<br>//4(16色），8(256色）16(高彩色)或24（真彩色）之一<br>DWORD biCompression;//位图压缩类型，必须是0（不压缩），（31-34字节）<br>//1(BI_RLE8压缩类型）或2(BI_RLE4压缩类型）之一<br>DWORD biSizeImage;//位图的大小(其中包含了为了补齐行数是4的倍数而添加的空字节)，以字节为单位（35-38字节）<br>LONG biXPelsPerMeter;//位图水平分辨率，每米像素数（39-42字节）<br>LONG biYPelsPerMeter;//位图垂直分辨率，每米像素数（43-46字节)<br>DWORD biClrUsed;//位图实际使用的颜色表中的颜色数（47-50字节）<br>DWORD biClrImportant;//位图显示过程中重要的颜色数（51-54字节）<br>}attribute((packed)) BITMAPINFOHEADER;<br>有颜色表的bmp文件中，颜色表的大小一般位16个字节。<br>位图数据：<br>         一般位图数据的记录顺序是从左到右，从下到上，所以图片的有效数据是倒着存储的，也就是第一行的数据一般在文件的最末尾，最后一行数据在文件的颜色表的后面，所以当我们调用ucgui的显示函数画图时，uigui的内部函数是，从文件底部数据开始一行一行的读取，然后显示在屏幕上，但是这样速度会比较慢；而且图片数据是以四字节对齐的，而且当图片的宽度为奇数，图片数据每行后面补零，保证数据是四字节对齐，这时ucgui内部会对这些补齐的数据进行处理，这同样会造成时间的浪费。<br>         我们可以自己编写一个读取函数，先读取两个文件结构的信息，得到每帧bmp图片的大小，宽度，高度，数据偏移量，然后再根据数据偏移量读取图片有效数据，这时我们可以一次读取多行数据，因为每行数据量是相等的，所以我们也很容易对补零的数据进行处理，这样就可以显著提升仿动态图的显示效果，防止刷屏水纹的出现。</p>]]></content>
    
    
    <summary type="html">典型的BMP图像文件由四部分组成</summary>
    
    
    
    <category term="驱动" scheme="http://xianke5200.github.io/categories/%E9%A9%B1%E5%8A%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>软件QSPI调试</title>
    <link href="http://xianke5200.github.io/2019/05/20/%E8%BD%AF%E4%BB%B6QSPI%E8%B0%83%E8%AF%95/"/>
    <id>http://xianke5200.github.io/2019/05/20/%E8%BD%AF%E4%BB%B6QSPI%E8%B0%83%E8%AF%95/</id>
    <published>2019-05-20T10:29:27.000Z</published>
    <updated>2020-10-16T12:40:28.825Z</updated>
    
    <content type="html"><![CDATA[<p>  相对于spi，qspi的是四条数据线并行传输数据，读写速度是普通spi的四倍。spi的工作模式有四种，但是qspi的工作模式只有两种也就是模式0（CPOL=0,CPOH=1）和模式3（CPOL=1,CPOL=1）.<br>  在使用软件qspi前，需要先使能对应芯片的qspi功能，一般是先读取使能位的状态寄存器，根据状态寄存器的qspi状态位判断该芯片当前是否已开启qspi，qspi与普通spi不能同时使用，在同一时刻只能有一种起作用。在qspi功能未开启前，需要先通过普通spi功能，来读写qspi使能状态位，开启qspi的功能。在通过普通spi读写状态寄存器时，需要先将hold和wp两个对应的io口拉高，来保证数据的有效传输。<br>  在使用普通spi或者qspi读写的可以通过直接操作寄存器的方式来优化程序的执行速度。<br>  在编写读写函数时要注意时序的问题，模式0：没有读写操作时，CLK引脚拉低，在时钟线的第一个边沿读写数据。<br>                                                                  模式1：没有读写操作时，CLK引脚拉高，在时钟线的第二个边沿读写数据。</p><pre><code>  __INLINE ret_code_t gpio_spi_drv_xfer(uint8_t *ptx_buf, uint16_t tx_length, uint8_t *prx_buf, uint16_t rx_length)&#123;ret_code_t ret = NRF_SUCCESS;uint8_t *rx_temp = prx_buf;GPIO_CS_LOW;if (tx_length)&#123;    for(int i = 0; i &lt; tx_length; i++)    &#123;        uint8_t tx_temp = ptx_buf[i];        for(int j = 0; j &lt; 8; j++)        &#123;            GPIO_CLK_LOW;            if(tx_temp &amp; 0x80)            &#123;                GPIO_SPI_MOSI_HIGH;            &#125;            else            &#123;                GPIO_SPI_MOSI_LOW;            &#125;            tx_temp &lt;&lt;= 1;            GPIO_CLK_HIGH;        &#125;    &#125;&#125;if (rx_length)&#123;            for(int i = 0; i &lt; rx_length; i++)    &#123;    #if (MISO_PIN != 0XFF)        for(unsigned char j = 0; j &lt; 8; j++)        &#123;            GPIO_CLK_LOW;            GPIO_CLK_HIGH;            rx_temp[i] &lt;&lt;= 1;            if(GPIO_SPI_MISO)            &#123;                rx_temp[i]++;            &#125;        &#125;    #endif    &#125;&#125;GPIO_CS_HIGH;return ret;&#125;__INLINE ret_code_t gpio_qspi_drv_xfer(uint8_t *ptx_buf, uint16_t tx_length, uint8_t *prx_buf, uint16_t rx_length)&#123;ret_code_t ret = NRF_SUCCESS;uint8_t *rx_temp = prx_buf;QSPI_LOCK();GPIO_CS_LOW;//qspi_drv_set_output();if (tx_length &gt; 0)&#123;    QSPI_DRV_SET_OUTPUT(0xf0);// set pin (28-31) dir to output    int size = tx_length;    uint8_t byte_reg = 0;    for(int i = 0; i &lt; size; i++)    &#123;        uint8_t tx_temp = (ptx_buf[i] &gt;&gt; 4) &amp; 0x0f;        GPIO_CLK_LOW;        //qspi_drv_write_data(tx_temp);        byte_reg = QSPI_READ_WRITE_REG();// get the pin (24 - 31) state        QSPI_DRV_WRITE_DAT(((tx_temp&lt;&lt;4)&amp;0xf0) | (byte_reg&amp;0x0f));        __nop();        GPIO_CLK_HIGH;        __nop();        GPIO_CLK_LOW;        //qspi_drv_write_data(ptx_buf[i]);        byte_reg = QSPI_READ_WRITE_REG();        QSPI_DRV_WRITE_DAT(((ptx_buf[i]&lt;&lt;4)&amp;0xf0) | (byte_reg&amp;0x0f));        __nop();        GPIO_CLK_HIGH;        __nop();    &#125;    GPIO_CLK_HIGH;&#125;__disable_irq();if (rx_length)&#123;            //qspi_drv_set_intput();    QSPI_DRV_SET_INPUT(0xf0);    for(int i = 0; i &lt; rx_length; i++)    &#123;            GPIO_CLK_LOW;        __nop();__nop();__nop();        GPIO_CLK_HIGH;        rx_temp[i] = QSPI_DRV_READ_DAT();        __nop();        rx_temp[i] = rx_temp[i] &amp; 0xf0;        GPIO_CLK_LOW;        __nop();__nop();__nop();        GPIO_CLK_HIGH;        rx_temp[i] |= (QSPI_DRV_READ_DAT() &gt;&gt; 4);        __nop();    &#125;    GPIO_CLK_HIGH;&#125;__enable_irq();GPIO_CS_HIGH;QSPI_UNLOCK();return ret;&#125;</code></pre>]]></content>
    
    
    <summary type="html">sct文件：相对于spi，qspi的是四条数据线并行传输数据，读写速度是普通spi的四倍。spi的工作模式有四种</summary>
    
    
    
    <category term="驱动" scheme="http://xianke5200.github.io/categories/%E9%A9%B1%E5%8A%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>csr8610调试小结</title>
    <link href="http://xianke5200.github.io/2018/12/21/csr8610%E8%B0%83%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://xianke5200.github.io/2018/12/21/csr8610%E8%B0%83%E8%AF%95%E5%B0%8F%E7%BB%93/</id>
    <published>2018-12-21T09:08:55.000Z</published>
    <updated>2020-10-16T12:22:49.740Z</updated>
    
    <content type="html"><![CDATA[<p>  为了调试CSR8610调通，把自己折腾的简直怀疑人生，花费了两个星期，总算是调好了，所以来唠叨两句。<br>  首先先列举一下csr官方的两个工具，一个config tool，编辑自己的配置文件，一个ps tool，烧录工具。<br>  利用csr8610实现的功能比较简单，因为博主比较渣，所以尽管是简单的东西，还是折腾的够呛；接下来说说<br>调试的时候遇到的一些bug，首先是得到蓝牙的连接状态，可以通过读取led事件，得到连接状态，虽然<br>8610固件内部会自动向我们配置的io口输出状态，配置io利用<br>config tool即可，<img src="https://img-blog.csdnimg.cn/20181214182323389.png" alt="在config tool工具的input/output配置项中配置即可"><br>后来发现这几个状态都不是连接状态，想从按键事件事件中得到也不可行。从led得到连接状态的具体配置参看如下：<br><img src="https://img-blog.csdnimg.cn/20181214182848191.png" alt="主要就是这三个配置项"><br>LEDs state：因为我只想得到连接状态，所以我把里面的所有项全都移除了，不移除是否会有影响还需验证。<br>LEDs event：<br><img src="https://img-blog.csdnimg.cn/20181214183015218.png" alt="在这里插入图片描述"><br>LEDs filter：<br><img src="https://img-blog.csdnimg.cn/2018121418305228.png" alt="在这里插入图片描述"><br>后面的LED 0，可以配置成其它项，只要程序上相对应即可。<br>有几点需要注意一下<br>如果使用的8610上的io大于12，那么就需要通过config tool工具map成gpio<br><img src="https://img-blog.csdnimg.cn/20181221172052328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>csr8610默认会输出一些状态，io口也可以随意配置，不过这是要注意io口输出的电平，因为8610中有些io口默认输出的电平为1.8V，当然也可以改变硬件电路来使输出电平达到3.3V，相应功耗也会变高。<br><img src="https://img-blog.csdnimg.cn/20181221172211458.png" alt="VDD_PADS接3.3V可以使8610 pio输出3.3v"><br>还有一点就是注意io口的相互影响，这个主要事配置文件要配置正确，之前调试的时候就遇到过这种情况，配置文件没有配置正确，通过控制io电平使8610从连接状态进入配对状态时，8610对指令不响应。出现这种情况的原因，可能是由于我主控芯片上多个io口和8610相连接，但是实际用到的控制io没有那么多，而且也没有通过config tool工具对这些io进行配置，从而导致io口相互影响，指令失效的问题。</p>]]></content>
    
    
    <summary type="html">为了调试CSR8610调通，把自己折腾的简直怀疑人生，花费了两个星期，总算是调好了，所以来唠叨两句。</summary>
    
    
    
    <category term="CSR8610" scheme="http://xianke5200.github.io/categories/CSR8610/"/>
    
    
  </entry>
  
  <entry>
    <title>Xmodem协议</title>
    <link href="http://xianke5200.github.io/2018/11/12/Xmodem%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xianke5200.github.io/2018/11/12/Xmodem%E5%8D%8F%E8%AE%AE/</id>
    <published>2018-11-12T09:21:00.000Z</published>
    <updated>2020-10-16T12:36:42.566Z</updated>
    
    <content type="html"><![CDATA[<p>   串行通信的文件传输协议主要有：Xmodem、Ymodem、Zmodem和KERMIT等。<br>   Xmodem协议一般支持128字节数据包，并且一般支持校验和、CRC两种校验方式，在出现数据包错误的情况下支持多次重传（一般为10次）。Xmodem协议传输有接收程序和发送程序完成，先由接收程序发送协商字符，协商校验方式，协商通过之后发送程序就开始发送数据包，接收程序接收到完整的一个数据包之后按照协商的方式对数据包进行校验。校验通过之后发送确认字符，然后发送程序继续发送下一包；如果校验失败，则发送否认字符，发送程序重传此数据包。<br>    定义：<br>    SOH    01H（modem数据头）<br>    EOT    04H（发送结束）<br>    ACK    06H（应答）<br>    NAK    15H（非应答）<br>    CAN    18H（取消发送）<br>    Xmodem数据包，包含一个标题开始字符，一个单字节包序号，一个包序号的补码，128字节数据和一个双字节的CRC校验。<br>    <img src="https://img-blog.csdnimg.cn/20181112170744164.png" alt="CRC校验信息包格式"><br>    1.校验和信息包：<br>    <img src="https://img-blog.csdnimg.cn/20181112170834209.png" alt="在这里插入图片描述"><br>    校验和方式传输流程：<br>        接收方要求发送方以校验和方式发送时以NAK来请求，发送方将对此做出应答。如下图：<br>        <img src="https://img-blog.csdnimg.cn/20181112171029363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">    <img src="https://img-blog.csdnimg.cn/20181112171044179.png" alt="在这里插入图片描述"><br>2.CRC校验信息包<br><img src="https://img-blog.csdnimg.cn/20181112171121839.png" alt="在这里插入图片描述"><br>计算16位CRC校验的除数多项式为X ^ 16 + X ^ 12 + X ^ 5 + 1，信息报中的128数据字节将参加CRC校验的计算，在发送端CRC16的高字节在前，低字节在后。<br>传输流程：接收方要求发送方以CRC校验方式发送时以‘C’来请求，发送方将对此作出应答。<br><img src="https://img-blog.csdnimg.cn/20181112171614997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181112171625558.png" alt="在这里插入图片描述"><br>信息报中如果生于的数据不足128字节，不足的部分将以0x1A填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">int32_t xmodem_download(uint32_t start_addr, uint32_t max_size, int *err)</span><br><span class="line">&#123;</span><br><span class="line">   xmodem_init();</span><br><span class="line">   xmodem_start();</span><br><span class="line"></span><br><span class="line">   while (1)</span><br><span class="line">   &#123;</span><br><span class="line">      int ret &#x3D; xmodem_getPacket();&#x2F;&#x2F;从串口得到数据，并校验</span><br><span class="line"></span><br><span class="line">      switch (ret)</span><br><span class="line">      &#123;</span><br><span class="line">         case XMODEM_DATA_OK:</span><br><span class="line">           sflash_write_data(start_addr, xbuf + 3, xmodem.packet_size);</span><br><span class="line">           start_addr +&#x3D; xmodem.packet_size;</span><br><span class="line">           xmodem.rcv_size +&#x3D; xmodem.packet_size;</span><br><span class="line">           xmodem.rcv_packet++;</span><br><span class="line">           if (xmodem.rcv_size &gt; max_size)</span><br><span class="line">           &#123;</span><br><span class="line">              xmodem_stop();</span><br><span class="line">              *err &#x3D; -2;</span><br><span class="line">              goto exit;</span><br><span class="line">           &#125;</span><br><span class="line">           xmodem_ack();</span><br><span class="line">         break;</span><br><span class="line"></span><br><span class="line">         case XMODEM_PKT_NUM_ERR:</span><br><span class="line">           xmodem_stop();</span><br><span class="line">           *err &#x3D; -3;</span><br><span class="line">           goto exit;</span><br><span class="line"></span><br><span class="line">         case XMODEM_CHECK_ERR:</span><br><span class="line">           xmodem_nack();</span><br><span class="line">         break;</span><br><span class="line"></span><br><span class="line">     case XMODEM_DATA_REPEAT:</span><br><span class="line">       xmodem_ack();</span><br><span class="line">     break;</span><br><span class="line"></span><br><span class="line">         case XMODEM_EOT:</span><br><span class="line">           xmodem_ack();</span><br><span class="line">           PRINTF((&quot;\nXMODEM info  pkt: %d, size: %ld, chk: %s\n&quot;,</span><br><span class="line">                   xmodem.packet_size,</span><br><span class="line">                   xmodem.rcv_size,</span><br><span class="line">                   xmodem.chk_type &#x3D;&#x3D; XMODEM_CHECKSUM ? &quot;CHECKSUM&quot; : &quot;CRC16&quot;));</span><br><span class="line">           *err &#x3D; 0;</span><br><span class="line">       goto exit;</span><br><span class="line"></span><br><span class="line">     case XMODEM_CAN:</span><br><span class="line">       xmodem_ack();</span><br><span class="line">       *err &#x3D; -4;</span><br><span class="line">           goto exit;</span><br><span class="line"></span><br><span class="line">     case XMODEM_SOH_ERR:</span><br><span class="line">       xmodem_stop();</span><br><span class="line">       *err &#x3D; -5;</span><br><span class="line">           goto exit;</span><br><span class="line"></span><br><span class="line">     default: break;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">   return xmodem.rcv_size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">串行通信的文件传输协议主要有：Xmodem、Ymodem、Zmodem和KERMIT等。</summary>
    
    
    
    <category term="驱动" scheme="http://xianke5200.github.io/categories/%E9%A9%B1%E5%8A%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>nrodic工具指令</title>
    <link href="http://xianke5200.github.io/2018/11/09/nrodic%E5%B7%A5%E5%85%B7%E6%8C%87%E4%BB%A4/"/>
    <id>http://xianke5200.github.io/2018/11/09/nrodic%E5%B7%A5%E5%85%B7%E6%8C%87%E4%BB%A4/</id>
    <published>2018-11-09T03:10:45.000Z</published>
    <updated>2020-10-16T12:29:27.887Z</updated>
    
    <content type="html"><![CDATA[<p>nrfutil的使用<br>命令<br>pkg命令： 这组命令用于生成DFU的包。<br>generate子命令： 生成一个（.zip）的包，后面可以通过手机APP或其它方式进行DFU的升级。<br>参数：<br>  –debug-mode： Debug模式切换，使能版本检查。<br>  –application TEXT： Application固件文件。<br>  –application-version INTEGER： Application固件的版本。<br>  –application-version-string TEXT： Application固件的版本字符串。<br>  –bootloader TEXT： Bootloader固件文件。<br>  –bootloader-version INTEGER： Bootloader固件的版本。<br>  –hw-version INTEGER： 硬件版本。<br>  –sd-id TEXT： 新的SoftDevice ID<br>  –softdevice TEXT： SoftDevice固件的文件。<br>  –key-file PATH： 提供的PEM格式的私有（签名的）Key。<br>  –help： 显示帮助。<br>  –sd-req TEXT： 兼容使用的SoftDevce，可以是一个或多个SoftDevice ID。<br>每个ID必须是2位或4位的HEX值，比如”0x12”, “0x1234”。<br>display子命令： 这个命令显示DFU包（.zip）的信息。</p><p>e.g.： nrfutil pkg display package.zip<br>dfu子命令： 这个命令可以通过串口、BLE或Thraed进行DFU更新。</p><p>ble参数： 通过BLE升级。<br>  -pkg，–package PATH： DFU包的文件名[必须]。<br>  -ic，–conn-ic-id [NRF51|NRF52]： 指明所使用的IC：NRF51或NRF52[必须]。<br>  -p，–port TEXT： 指定串口。<br>  -n，–name TEXT： 设备名。<br>  -a，–address TEXT： 蓝牙地址。<br>  -snr，–jlink_snr TEXT： Jlink序列号。<br>  -f，–flash_connectivity： 自动烧写connectivity固件。<br>  –help： 显示帮助。<br>ble示例： nrfutil dfu ble -ic NRF52 -pkg app_dfu_package.zip -p COM3 -n “MyDevice” -f<br>Thread参数： 通过Thread协议升级，不常用。<br>serial参数： 通过串口进行升级。<br>  -pkg，–package PATH： DFU包的文件名[必须]。<br>  -p，–port TEXT： 指定串口。<br>  -fc，–flow-control BOOLEAN： 使能流控这个值为1。<br>  -prn，–packet-receipt-notification INTEGER： Set the packet receipt notification value<br>  -b，–baud-rate INTEGER： 设置串口波特率。<br>  –help： 显示帮助。<br>serial示例： nrfutil dfu serial -pkg app_dfu_package.zip -p COM3 -b 115200<br>usb_serial示例： 与serial相同。<br>zigbee参数：通过zigbee升级。<br>    -f TEXT:zigbee升级镜像包文件名<br>    -snr INTEGER:序列号<br>    -chan INTEGER:通道号<br>生成zigbee升级包示例：nrfutil pkg generate –hw-version 52 –sd-req 0x00 –application-version 0x01020101<br>     –application app.hex –key-file key.pem app_dfu_package.zip –zigbee True –zigbeemanufacturer-id<br>    123 –zigbee-image-type 321 –zigbee-comment good_image<br>zigbee升级示例：nrfutil dfu zigbee -f CAFE-1234-good_image.zigbee -snr 683604699 -chan 20</p><p>keys子命令： 这个命令生成用于校验DFU包的加密密钥。<br> generate参数： 生成加密密钥，nrfutil keys generate private.pem<br> display参数： 显示加密文件的加密密钥。<br>  –key TEXT： （pk | sk）显示公钥（pk，public key），或私钥（sk，private key）。<br>  –format TEXT： （hex | code | pem）显示Key的格式：hex格式、C格式、PEM格式。<br>  –out_file TEXT： 输出保存的文件名。<br>  –help： 显示帮助。<br>settings子命令： 这个命令生成Bootloader DFU settings，必须烧写到Flash的最后一页。<br>  generate参数： 生成Bootloader DFU settings，这将生成一个hex文件。<br>  –family [NRF51 | NRF52 | NRF52QFAB | NRF52810 | NRF52840]： 指定IC。<br>  –application TEXT： 指定Application固件文件。<br>  –application-version INTEGER： Application固件的版本。<br>  –application-version-string TEXT： Application固件的版本字符串。<br>  –bootloader TEXT： Bootloader固件文件。<br>  –bootloader-version INTEGER： Bootloader固件的版本。<br>  –bl-settings-version INTEGER:    Bootloader setting 的版本<br>  –help： 显示帮助。<br>e.g:nrfutil settings generate –family NRF52 –application app.hex –<br>application-version 3 –bootloader-version 2 –bl-settings-version 1<br> settings.hex<br>display参数： 显示Bootloader DFU settings的hex文件的信息。<br>e.g.： nrfutil settings display flash_dump.hex</p><p>nrfjprog工具<br>    -family:指定IC<br>    -eraseall：将内部法拉盛全部擦除<br>    -erasepage startaddress - endaddress：擦除flash开始地址（startaddress）到结束地址（endaddress）部分<br>    -program：烧录<br>    -rpb：加密<br>    -reset：复位<br>示例<br>        nrfjprog –family NRF52 –eraseall<br>        #nrfjprog –family NRF52 –recover<br>        nrfjprog –family NRF52 –program .\APP-BL-Vx.xx.hex –reset<br>        #nrfjprog –family NRF52 –rbp ALL<br>mergehex工具<br>    -merge：合成多个文件为一个文件<br>    -output：输出目标文件<br>示例：mergehex –merge .\obj\APP-Release.hex .\S132-bootloader.hex .\dfu_settings.hex –output .\APP-BL-Vx.xx.hex<br>可以将多个.hex文件合并成一个文件，然后通过jlink烧录到设备中</p>]]></content>
    
    
    <summary type="html">nrfutil的使用</summary>
    
    
    
    <category term="Nordic" scheme="http://xianke5200.github.io/categories/Nordic/"/>
    
    
  </entry>
  
  <entry>
    <title>emwin从外部flash中读取bmp图片显示</title>
    <link href="http://xianke5200.github.io/2018/11/08/emwin%E4%BB%8E%E5%A4%96%E9%83%A8flash%E4%B8%AD%E8%AF%BB%E5%8F%96bmp%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
    <id>http://xianke5200.github.io/2018/11/08/emwin%E4%BB%8E%E5%A4%96%E9%83%A8flash%E4%B8%AD%E8%AF%BB%E5%8F%96bmp%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/</id>
    <published>2018-11-08T07:15:17.000Z</published>
    <updated>2020-10-16T12:25:51.661Z</updated>
    
    <content type="html"><![CDATA[<p>在emwin中有提供了一个从外部读取图片数据进行显示的函数，如下：<br><img src="https://img-blog.csdnimg.cn/20181108145438825.png" alt="在这里插入图片描述"><br>而且提供了官方例程，不过官方历程中从外部读取是从外部文件系统中进行读取的bmp图片进行显示，官方例程如下</p><pre><code>/*********************************************************************************************************** 函 数 名: _GetData* 功能说明: 被函数 GUI_BMP_DrawEx 调用* 形 参： p FIL 类型数据* NumBytesReq 请求读取的字节数* ppData 数据指针* Off 如果 Off = 1，那么将重新从起始位置读取* 返 回 值: 返回读取的字节数**********************************************************************************************************/int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Off)&#123;static int FileAddress = 0;UINT NumBytesRead;FIL *PicFile;PicFile = (FIL *)p;/** 检测缓存大小*/if (NumBytesReq &gt; sizeof(acBuffer)) &#123;NumBytesReq = sizeof(acBuffer);&#125;/** 设置读取位置*/if(Off == 1) FileAddress = 0;else FileAddress = Off;result =f_lseek(PicFile, FileAddress);/** 读取数据到缓存*/result = f_read(PicFile, acBuffer, NumBytesReq, &amp;NumBytesRead);/** 让指针 ppData 指向读取的数据*/*ppData = (const U8 *)acBuffer;/** 返回读取的字节数*/return NumBytesRead;&#125;/*********************************************************************************************************** 函 数 名: _ShowBMP1* 功能说明: 显示 BMP 图片* 形 参: sFilename 要读取的文件名* 返 回 值: 无**********************************************************************************************************/void _ShowBMP1(const char *sFilename)&#123;/* 打开文件 */result = f_open(&amp;file, sFilename, FA_OPEN_EXISTING | FA_READ | FA_OPEN_ALWAYS);if (result != FR_OK)&#123;return;&#125;/* 绘制 BMP 图片 */GUI_BMP_DrawEx(_GetData, &amp;file, 0, 0);/* 关闭文件 */f_close(&amp;file);&#125;</code></pre><p>关键部分就是从回调函数中读取bmp图片的数据。例程中时从外部文件按系统中进行读取，如果我们想从外部flash中直接读取的话，只需要在回调函数中对读取bmp数据部分进行简单修改就可以了</p><pre><code>/*********************************************************************************************************** 函 数 名: _GetData* 功能说明: 被函数 GUI_BMP_DrawEx 调用* 形 参： p 图片参数* NumBytesReq 请求读取的字节数* ppData 数据指针* Off 如果 Off = 1，那么将重新从起始位置读取* 返 回 值: 返回读取的字节数**********************************************************************************************************/int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Off)&#123;image_params_t *p_flash_pic= (image_params_t *)p;if ((Off + NumBytesReq) &gt; p_flash_pic-&gt;size)&#123;    NRF_LOG_ERROR(&quot;Params error 0&quot;);    NumBytesReq= p_flash_pic-&gt;size - Off;&#125;/** 检测缓存大小*/if (NumBytesReq &gt; sizeof(p_pic_buf)) &#123;NumBytesReq = sizeof(p_pic_buf);&#125;/** 设置读取位置*/if(Off == 1) Off = 0;else Off = Off;//~~result =f_lseek(PicFile, FileAddress);~~ /**** 读取数据到缓存*///~~result = f_read(PicFile, acBuffer, NumBytesReq, &amp;NumBytesRead);~~ /**GT24_FREE_FLASH_PIC_START_ADDR是flash中划分来存储bmp图片的起始地址，p_flash_pic-&gt;address是要显示的bmp图*相对于GT24_FREE_FLASH_PIC_START_ADDR的偏移地址，是从回调函数中第一个参数传进来的*/uint32_t current_addr = GT24_FREE_FLASH_PIC_START_ADDR + p_flash_pic-&gt;address + (offset==1?0:offset); /**读取函数是自己创建的通过spi从flash读取指定字节大小的函数，这个可以根据自己的实际情况来定*/ret = gt24_read_nbytes(p_pic_buf, current_addr, NumBytesReq);**/** 让指针 ppData 指向读取的数据*/*ppData = (const U8 *)p_pic_buf;/** 返回读取的字节数*/return NumBytesReq;&#125;/*********************************************************************************************************** 函 数 名: _ShowBMP1* 功能说明: 显示 BMP 图片* 形 参: sFilename 要读取的文件名* 返 回 值: 无**********************************************************************************************************/void _ShowBMP1(void)&#123;/* 绘制 BMP 图片 ,file 是传进去的flash中的图片相关的参数，可以在Getdata中的第一个形参中得到*/GUI_BMP_DrawEx(_GetData, &amp;file, 0, 0);&#125;</code></pre><p>到这里，就完成了从外部flash中读取图片信息进行显示的整个过程了，除了从外部flash中读取bmp图片，还可以从外部flash中读取gif图片，也只需要将emwin提供的官方例程中的回调函数中的数据读取部分改为flash读取函数即可，同样要是想从外部flash中读取XBF字库文件，也是一样。<br>读取显示的流程：<br>1.制作图片数据bin文件，我在bin文件前面会保存每张图片的相关信息，包括图片大小，图片数据偏移量（图片在bin文件中的位置），图片名字；我用一个结构体来保存一张图片的上述数据；也就是说假如有5张图片，在bin的开始部分会保存5个包含图片信息的结构体，后面跟着的再是5张图片的完整数据（bmp头、信息头、颜色表（有的话）、图片有效数据）。<br>2.将bin文件写入flash中，方式有很多种，可以通过利用串口通过xmodem写入flash，也可以利用手机app通过蓝牙下发bin文件，写入flash中。<br>3.根据文件名遍历bin文件，每次读取一个结构体大小的数据量，直到找到相对应文件名的结构体，得到对应图片的相关信息，得到图片的名字、大小，以及偏移量（图片在bin文件中的位置），图片类型，这个结构体就是传入GUI_BMP_DrawEx函数的第二个形参，也就是getdata函数的第一个形参。<br>4.根据得到的图片相关信息，利用上述代码读取图片数据显示</p>]]></content>
    
    
    <summary type="html">emwin从外部flash读取bmp图片显示简要描述</summary>
    
    
    
    <category term="GUI" scheme="http://xianke5200.github.io/categories/GUI/"/>
    
    
  </entry>
  
  <entry>
    <title>nrfgo studio 连接jlink，无法连接，recover时出现cannot find or open jlinkarm.dll</title>
    <link href="http://xianke5200.github.io/2018/07/17/nrfgo%20studio%20%E8%BF%9E%E6%8E%A5jlink%EF%BC%8C%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%EF%BC%8Crecover%E6%97%B6%E5%87%BA%E7%8E%B0cannot%20find%20or%20open%20jlinkarm.dll/"/>
    <id>http://xianke5200.github.io/2018/07/17/nrfgo%20studio%20%E8%BF%9E%E6%8E%A5jlink%EF%BC%8C%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%EF%BC%8Crecover%E6%97%B6%E5%87%BA%E7%8E%B0cannot%20find%20or%20open%20jlinkarm.dll/</id>
    <published>2018-07-17T07:33:36.000Z</published>
    <updated>2020-10-16T12:28:47.794Z</updated>
    
    <content type="html"><![CDATA[<p>  这几天调试jlink时，突然无法使用jlink进行程序下载，一开始觉得是jlink的固件坏了，于是各种找资源，尝试多次，最后终于在sam-bav2.15版本上成功更换jlink固件，本以为这样问题就应该解决了，没想到插在电脑上一试，问题依旧；又觉得是系统路径不对，去注册表改路径，可进注册表一看，路径与安装路径完全一致，所以此法又不通；或许是自己软件安装方式不对，于是又屁颠屁颠的卸载重装N次，提示依旧，不见好转；<br>  正当束手无策，感慨天要亡我之际，无意之中打开安装的jlink驱动文件安装目录下的jlink.exe程序，发现该程序提示的jlink S/N号为-1，顿感此处定有异常，真是山重水复疑无路，柳暗花明又一村。<br><img src="https://img-blog.csdn.net/20180717154141425?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>  在jlink.exe下执行“exec  setsn=XXXXXXXX”命令，其中XXXXXXXX就是新的S/N号，数字随意。<br>  <img src="https://img-blog.csdn.net/201807171543179?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzMzMzIzNTQ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>  成功修改后，再次进入nrfgo studio，成功识别。<br>  为了解决这个问题，还是建议，先重新刷一下固件，然后再修改序列号。</p>]]></content>
    
    
    <summary type="html">这几天调试jlink时，突然无法使用jlink进行程序下载</summary>
    
    
    
    <category term="驱动" scheme="http://xianke5200.github.io/categories/%E9%A9%B1%E5%8A%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>蓝牙基带与链路控制器协议</title>
    <link href="http://xianke5200.github.io/2018/07/04/%E8%93%9D%E7%89%99%E5%9F%BA%E5%B8%A6%E4%B8%8E%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8D%8F%E8%AE%AE/"/>
    <id>http://xianke5200.github.io/2018/07/04/%E8%93%9D%E7%89%99%E5%9F%BA%E5%B8%A6%E4%B8%8E%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8D%8F%E8%AE%AE/</id>
    <published>2018-07-04T13:52:39.000Z</published>
    <updated>2020-10-16T12:46:58.817Z</updated>
    
    <content type="html"><![CDATA[<p>#1蓝牙基带概述</p><p>蓝牙发送数据时基带部分将来自高层协议的数据进行信道编码，向下给射频进行发送；接收数据时，射频将数据经过解调恢复空<br>中数据上传给基带，基带再对数据进行信道解码，向高层传输。<br>    信道分组编码遵循小端格式。<br>    蓝牙设备地址可以分为三个部分：LAP地位地址（24位）、UAP高位地址（8位）和NAP无效地址部分（16位）；NAP和UAP共同构成了设备的唯一标识符，由SIG的蓝牙地址管理机构分配给各个蓝牙设备制造商。<br>    一个微微网只有一个主设备，一个主设备最多可以同时与7个从设备同时进行通信，这些从化设备称为激活从设备。还可以由隶属与这个微微网中主设备的休眠从设备。休眠从设备不进行数据收发，但是与主设备仍然保持时钟同步。<br>    每个人蓝牙设备都有一个独立运行的内部本地时钟，用于决定收发器的定时和跳频同步。微微网中的定时和跳频选择由主设备的始终决定，建立微微网是，主设备的时钟传送给从设备，每个从设备给自己的本地时钟加一个偏移量，实现与主设备的同步。<br>    蓝牙基带有四个关键周期312.5us、625us、1.25ms和1.28s，主设备发往从设备的数据从偶数时隙开始发送。<br>    CLKN(本地时钟频率）、CLKE（估计时钟频率）CLK（实际运行时钟频率）；CLK和CLKE由CLKN加上一个偏移量得到。<br>#2蓝牙物理链路<br>通信设备之间物理层的数据连接通道就是物理链路。蓝牙系统由两种物理链路：ACLHE SCO。<br>    ACL链路既可以支持异步应用也可以支持同步应用，一对主从舍必只能建立一条ACL链路，ACL链路的通信的可靠性可以由分组重传来保证。<br>    SCO链路数据分组不进行重传操作，一般用于实时性很强的数据传输。只有建立了ACL链路才可以建立SCO链路，一个微微网中的主设备最多可以同时建立三条SCO链路。<br>#3蓝牙基带分组<br>基带分组至少包含接入码（72或68bit），大多情况下还包含分组头（54bit）和有效载荷（0~2745bit）。<br>    接入码用于同步、直流载频泄露偏执补偿和标识。接入码包含引导码（4bit）、同步字（64bit）和尾码（4bit）。<br>    接入码可以分为三类：信道接入码、设备接入码和请求接入码。<br>    引导码用于DC偏置补偿，引导吗只有两种1010和0101，具体取值取决于紧跟的同步字最低位为0（0101）还是1（1010）。<br>    同步字基于对应设备地址的LAP。<br>    尾码取值只有两种，取决于同步字最高位为0（1010）还是为1（0101）.<br>    分组头格式包含如下：<br>    AM_ADDR：3 ：微微网中激活从设备的地址。<br>    TYPE：4 ：分组类型，共有16中。<br>    FLOW：1 ：ACL链路的数据分组的流量控制标志。<br>    ARQN：1 ：无编号自动请求重发。<br>    SEQN：1 ：序列编号，提供了一种防止分组重传的的机制，对于无编号的ARQ特别重要。<br>    HEC：8 ：分组头错误校验。<br>    有效载荷分为语音有效载荷和数据有效载荷。语音有效载荷长度固定，没有有效载荷头；数据有效载荷包括有效载荷头、有效载荷体和CRC校验码。<br>#4蓝牙基带纠错机制<br>蓝牙基带部分提供了三种纠错机制1/3比例FEC、2/3比例FEC和ARQ.<br>#5蓝牙基带逻辑信道<br>链路控制、链路管理、用户异步数据、用户等时数据和用户同步数据信道。<br>#6蓝牙基带收发规则<br>发送规则<br>    主设备为每个从设备准备了一个独立的ACL链路的TX缓冲器，一个或多个SCO链路TX缓冲器。<br>    每个TX缓冲器包括两个先入先出寄存器，这连个缓冲器交替使用实现数据的异步和同步发送。<br>    接收规则<br>    主设备对所有从设备共用一个ACL链路的RX缓冲器，SCO缓冲器的数量取决于实际SCO链路的数量。规则与的发送类似。</p>]]></content>
    
    
    <summary type="html">sct文件：蓝牙发送数据时基带部分将来自高层协议的数据进行信道编码</summary>
    
    
    
    <category term="蓝牙" scheme="http://xianke5200.github.io/categories/%E8%93%9D%E7%89%99/"/>
    
    
  </entry>
  
  <entry>
    <title>蓝牙射频协议规范</title>
    <link href="http://xianke5200.github.io/2018/06/14/%E8%93%9D%E7%89%99%E5%B0%84%E9%A2%91%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83/"/>
    <id>http://xianke5200.github.io/2018/06/14/%E8%93%9D%E7%89%99%E5%B0%84%E9%A2%91%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83/</id>
    <published>2018-06-14T13:42:33.000Z</published>
    <updated>2020-10-16T12:47:06.291Z</updated>
    
    <content type="html"><![CDATA[<p>#1.蓝牙射频概述<br>    射频是介于声音与红外线频率之间的电磁波频率。对于无线通信系统而言，射频部分就是通信系统</p><p>的“空中接口“，不同厂商的设备要实现兼容或者互操作的基本要求就是射频规范的统一，而且</p><p>通信质量也是由射频来决定的。蓝牙射频规范规定了射频频段、调制方式、调频频率、发射功<br>率、接收机灵敏度等参数。<br>##1.频段和信道安排<br>    蓝牙工作在无需许可证的2.4GHz ISM频段上。蓝牙每个频道带宽为1MHz，相邻频道中心频率间隔</p><p>为1MHz。为减少带外的辐射和干扰，保留的上下保护频带分别为3.5和2MHz，79个调频频点</p><p>中至少有75应该伪随机的进行跳变，在一个30秒的时间段内，任何一个频点的使用时间不得超<br>过0.4秒。<br>##2蓝牙发射器性能<br>    蓝牙设备由3个功率级别，100mW（20dBm)、2.5mW（约4dBm)、1mW（0dBm）。<br>###1.蓝牙射频调制特性<br>    蓝牙射频采用的调制方式是高斯滤波的二进制频移键控，码元带宽积BT为0.5，调制指数h=0.28<del>0.35.<br>###2蓝牙射频的杂散辐射<br>    （1）带内杂散辐射<br>    蓝牙发射器信号必须经过一个频谱整形器，其频谱必须与FCC的20dB带宽定义的一致，并且根据FCC的标准进行测量。<br>    （2）带外杂散辐射<br>    蓝牙射频的带外杂散辐射功率的测试在100KHz上进行。<br>##3.蓝牙接收器性能<br>###1.测试接收器的参靠信号<br>    参考信号围殴GFSK已调信号，调制指数h=0.28</del>0.35，码元带宽积为0.5，比特率为1Mbps，频</p><p>率偏移不大于1M,调制序列为伪随机二进制序列PRBS9，干扰调制序列为伪随机二进制序列</p><p>PRBS15.<br>###2接收器的实际灵敏度<br>    实际灵敏度为蓝牙通信系统误比特率达到1%是所需的输入电平，蓝牙接收机灵敏度应该优于-70dBM。<br>###3.干扰性能<br>    干扰性能测量条件是：同信道及相邻1MHz、2MHz信道上的信号比参考灵敏度高10dB以上，其他频率时信号比参考灵敏度高3dB。<br>###4.带外截止<br>    带外截止在有用信号超过参考灵敏度信号3dB时进行测量。<br>###5交调特性<br>    参考灵敏度BER=0.1%，应满足频率f0处的有用信号超出参考灵敏度电平6dB；频率f1处使用-39dBm的静态正弦波，频率f2处使用-39dBm的蓝牙已调信号。<br>###6.最大可用电平<br>    最大可用点评应高于-20dBm。<br>###7.杂散辐射<br>    在100kHz带宽上测量杂散辐射功率。<br>###8.接收信号强度指示<br>    通过对接收到的信号与两个门限电平进行比较得到接收信号强度指示（RSSI），在这两个门限值之间是信号的最佳接收范围。<br>#2.蓝牙信道与时隙<br>##1蓝牙物理信道<br>    蓝牙的物理信道是由伪随机序列控制的79个跳频频点构成的，即不同的跳频序列代表着不同的信道。<br>##2.时隙<br>    蓝牙的跳频速率为1600次/s，每个频率的持续时间为625us称为一个时隙。</p>]]></content>
    
    
    <summary type="html">sct文件：射频是介于声音与红外线频率之间的电磁波频率。对于无线通信系统而言</summary>
    
    
    
    <category term="蓝牙" scheme="http://xianke5200.github.io/categories/%E8%93%9D%E7%89%99/"/>
    
    
  </entry>
  
  <entry>
    <title>QT添加GPIB驱动库</title>
    <link href="http://xianke5200.github.io/2018/04/25/QT%E6%B7%BB%E5%8A%A0GPIB%E9%A9%B1%E5%8A%A8%E5%BA%93/"/>
    <id>http://xianke5200.github.io/2018/04/25/QT%E6%B7%BB%E5%8A%A0GPIB%E9%A9%B1%E5%8A%A8%E5%BA%93/</id>
    <published>2018-04-25T15:08:25.000Z</published>
    <updated>2020-10-16T12:34:12.891Z</updated>
    
    <content type="html"><![CDATA[<p>第一步安装GPIB卡的驱动，可以安装NI提供的驱动库文件，可以去NI官网查阅<a href="http://search.ni.com/nisearch/app/main/p/ap/tech/lang/zhs/pg/1/sn/ssnav:ndr/aq/AND%28nicontenttype:driver,%20sitesection:ndr,%20AND%20%28OR%28nigen10:785,%20productcategories:785,%20%22NI-488.2%22%29%20,%20OR%28nilanguage:zh-CN,%20nilanguage:en%29%29%29/">下载安装</a><br>第二步在QT工程中添加GPIB库文件<br>        INCLUDEPATH += “C:\Program Files (x86)\IVI Foundation\VISA\WinNT\Include”<br>        LIBS += “C:\Program Files (x86)\IVI Foundation\VISA\WinNT\lib\msc\visa32.lib”<br>在自己的QT工程中添加这两个文件的路径，确认电脑上有这两个文件。<br>    然后就可以通过NI提供的如下接口：<br>    viOpenDefaultRM（sesn）：打开缺省资源管理器资源对话通道。<br>    viFindRsrc（sesn，expr，findList，retcnt，instrDesc）：查询VISA系统进行资源定位。<br>    viOpen（sesn，rsrcname，accessMode，timeout，vi）：打开特定资源的对话通道。<br>    viWrite（）和viRead（）函数<br>    实现查找电脑上的GPIB设备，并与GPIB设备实现通信的简单任务了。</p>]]></content>
    
    
    <summary type="html">第一步安装GPIB卡的驱动，可以安装NI提供的驱动库文件，可以去NI官网查阅</summary>
    
    
    
    <category term="QT" scheme="http://xianke5200.github.io/categories/QT/"/>
    
    
  </entry>
  
</feed>
